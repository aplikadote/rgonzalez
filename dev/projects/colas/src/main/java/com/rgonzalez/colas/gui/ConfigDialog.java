/*
 * ConfigDialog.java
 *
 * Created on 26 de julio de 2008, 5:22
 */
package com.rgonzalez.colas.gui;

import com.rgonzalez.colas.distributions.IDistribution;
import com.rgonzalez.colas.exceptions.ParametersException;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * JDialog para configurar las distribuciones
 *
 * @author Administrador
 */
public class ConfigDialog extends javax.swing.JDialog {

    private JPanel panelesLabel[];
    private JPanel panelesText[];
    private JLabel labels[];
    private JTextField texts[];
    private int n;
    private ArrayList<String> keys;
    private Hashtable<String, Class> classes;
    private IDistribution dist;

    /**
     * Constructor de ConfigDialog
     *
     * @param parent El Frame padre.
     * @param modal Si se deshabilita o no el frame padre
     * @param dist La ditribucion de probabilidad a configurar.
     */
    public ConfigDialog(java.awt.Frame parent, boolean modal, IDistribution dist) {
        super(parent, "Configuracion " + dist.getName(), modal);
        initComponents();
        this.dist = dist;

        n = dist.getKeys().size();
        keys = dist.getKeys();
        classes = dist.getParametersClass();

        this.panelCenter.setLayout(new GridLayout(n, 2));

        panelesLabel = new JPanel[n];
        panelesText = new JPanel[n];
        labels = new JLabel[n];
        texts = new JTextField[n];

        for (int i = 0; i < n; i++) {
            panelesLabel[i] = new JPanel(new FlowLayout(FlowLayout.LEFT));
            panelesLabel[i].setSize(200, 30);
            panelesText[i] = new JPanel(new FlowLayout(FlowLayout.LEFT));
            panelesText[i].setSize(200, 30);

            String key = keys.get(i);

            labels[i] = new JLabel();
            labels[i].setText(key);

            texts[i] = new JTextField();
            texts[i].setPreferredSize(new Dimension(100, 20));

            if (classes.get(key) == Double.class) {
                texts[i].setText(dist.getParameters().get(key).toString());
            } else {
                texts[i].setText(Integer.toString((int) dist.getParameters().get(key).doubleValue()));
            }

            panelesLabel[i].add(labels[i]);
            panelesText[i].add(texts[i]);

            this.panelCenter.add(panelesLabel[i]);
            this.panelCenter.add(panelesText[i]);
        }

        this.pack();
        this.setSize(this.getWidth() + 30, this.getHeight() + 20);
        Util.center(this);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCenter = new javax.swing.JPanel();
        panelSouth = new javax.swing.JPanel();
        buttonOk = new javax.swing.JButton();
        buttonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout panelCenterLayout = new javax.swing.GroupLayout(panelCenter);
        panelCenter.setLayout(panelCenterLayout);
        panelCenterLayout.setHorizontalGroup(
            panelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        panelCenterLayout.setVerticalGroup(
            panelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 267, Short.MAX_VALUE)
        );

        getContentPane().add(panelCenter, java.awt.BorderLayout.CENTER);

        panelSouth.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        buttonOk.setText("Aceptar");
        buttonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkActionPerformed(evt);
            }
        });
        panelSouth.add(buttonOk);

        buttonClose.setText("Cerrar");
        buttonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCloseActionPerformed(evt);
            }
        });
        panelSouth.add(buttonClose);

        getContentPane().add(panelSouth, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Se cierra la ventana.
     *
     * @param evt El evento.
     */
private void buttonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCloseActionPerformed
    this.dispose();
}//GEN-LAST:event_buttonCloseActionPerformed

    /**
     * Antes de almacenar los nuevos valores para la distribucion, primero se
     * chequean.
     *
     * @param evt El evento.
     */
private void buttonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkActionPerformed
    Hashtable<String, Double> auxHT = new Hashtable<String, Double>();
    boolean isDouble = true;
    int j = 0;

    try {
        for (int i = 0; i < n; i++) {
            if (classes.get(keys.get(i)) == Double.class) {
                isDouble = true;
                j = i;
                double value = Double.parseDouble(this.texts[i].getText());
                auxHT.put(keys.get(i), value);
            } else {
                isDouble = false;
                j = i;
                int value = Integer.parseInt(this.texts[i].getText());
                auxHT.put(keys.get(i), (double) value);
            }
        }

        dist.checkParameters(auxHT);
        dist.setParameters(auxHT);
        this.dispose();

    } catch (NumberFormatException e) {
        if (isDouble) {
            JOptionPane.showMessageDialog(this, "Ingrese numero real para " + keys.get(j), "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Ingrese numero entero para " + keys.get(j), "Error", JOptionPane.WARNING_MESSAGE);
        }
    } catch (ParametersException e) {
        JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
    }
}//GEN-LAST:event_buttonOkActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClose;
    private javax.swing.JButton buttonOk;
    private javax.swing.JPanel panelCenter;
    private javax.swing.JPanel panelSouth;
    // End of variables declaration//GEN-END:variables

}
